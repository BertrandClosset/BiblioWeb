<?php

namespace BibliothequeUniversitaire\EntiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ReservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReservationRepository extends EntityRepository
{
    public function findByLecteur(Lecteur $lecteur)
    {
        $query = $this->getEntityManager()->createQuery("SELECT r
                                                         FROM BibliothequeUniversitaireEntiteBundle:Reservation r
                                                         WHERE r.lecteurs_reservant = :lecteur_id
                                                         ORDER BY r.dateReservation");
        $query->setParameter(':lecteur_id', $lecteur->getId());

        $result = $query->execute();

        return $result;
    }

    public function findByLivre(Livre $livre)
    {
        $query = $this->getEntityManager()->createQuery("SELECT r
                                                         FROM BibliothequeUniversitaireEntiteBundle:Reservation r
                                                         WHERE r.livre_reserve = :livre_id
                                                         ORDER BY r.dateReservation");
        $query->setParameter(':livre_id', $livre->getId());

        $result = $query->execute();

        return $result;
    }

    public function findByLecteurAndLivre(Lecteur $lecteur, Livre $livre)
    {
        $query = $this->getEntityManager()->createQuery("SELECT COUNT(r)
                                                         FROM BibliothequeUniversitaireEntiteBundle:Reservation r
                                                         WHERE r.livre_reserve = :livre_id
                                                         AND r.lecteurs_reservant = :lecteur_id
                                                         ");
        $query->setParameter(':livre_id', $livre->getId());
        $query->setParameter(':lecteur_id', $lecteur->getId());

        $result = $query->getSingleScalarResult();

        if ($result > 0)
        {
            return true;
        } else {
            return false;
        }
    }
}
