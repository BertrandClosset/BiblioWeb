<?php

namespace BibliothequeUniversitaire\EntiteBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Validator\Constraints\Collection;

/**
 * EmpruntRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmpruntRepository extends EntityRepository
{
    public function findByLecteur(Lecteur $lecteur)
    {
        $query = $this->getEntityManager()->createQuery("SELECT e
                                                         FROM BibliothequeUniversitaireEntiteBundle:Emprunt e
                                                         WHERE e.lecteur_emprunteur = :lecteur_id
                                                         ORDER BY e.dateDebut");
        $query->setParameter(':lecteur_id', $lecteur->getId());

        $result = $query->execute();

        return $result;
    }

    public function findAll()
    {
        return $this->findBy(array(), array('dateDebut' => 'ASC'));
    }

    public function findAllSortByLecteur()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->select('e')
                     ->from('BibliothequeUniversitaireEntiteBundle:Emprunt', 'e')
                     ->leftJoin('e.lecteur_emprunteur', 'l')
                     ->orderBy('l.nom', 'ASC')
                     ->addOrderBy('l.prenom', 'ASC')
                     ->addOrderBy('e.dateDebut', 'ASC');

        return $queryBuilder->getQuery()->getResult();
    }

    public function findAllByLivre(Livre $livre)
    {
        $query = $this->getEntityManager()->createQuery("SELECT e
                                                         FROM BibliothequeUniversitaireEntiteBundle:Emprunt e
                                                         LEFT JOIN e.exemplaire_emprunte ee
                                                         LEFT JOIN e.lecteur_emprunteur l
                                                         WHERE ee.livres_dupliques = :livre_id
                                                         ORDER BY l.nom, l.prenom, e.dateDebut");
        $query->setParameter(':livre_id', $livre->getId());

        $result = $query->execute();

        return $result;
    }

    public function countLivreEmprunt(Lecteur $lecteur)
    {
        if ($lecteur->getCycleChoisi()->getId() == 3)
        {
            return "ILLIMITÃ‰";
        } else {
            $nombreLivresCycle = $lecteur->getCycleChoisi()->getNombreLivres();

            $query = $this->getEntityManager()->createQuery("SELECT COUNT(e)
                                                             FROM BibliothequeUniversitaireEntiteBundle:Emprunt e
                                                             WHERE e.lecteur_emprunteur = :lecteur_id
                                                             ORDER BY e.dateDebut");
            $query->setParameter(':lecteur_id', $lecteur->getId());

            $result = $query->getSingleScalarResult();

            return $nombreLivresCycle - $result;
        }
    }

    public function findDateRenduPlusTot(Livre $livre)
    {
        $query = $this->getEntityManager()->createQuery("SELECT e.dateDebut, cy.duree
                                                         FROM BibliothequeUniversitaireEntiteBundle:Emprunt e
                                                         LEFT JOIN e.exemplaire_emprunte ee
                                                         LEFT JOIN e.lecteur_emprunteur l
                                                         LEFT JOIN l.cycle_choisi cy
                                                         WHERE ee.livres_dupliques = :livre_id");
        $query->setParameter(':livre_id', $livre->getId());

        $tabArray = array();

        foreach ($query->getResult() as $value)
        {
            $dateStr = $value['dateDebut']->format('d-m-Y');
            $date = strtotime($dateStr);
            $date = strtotime("+" . $value['duree'] . " day", $date);

            if ($date > time("now"))
                $tabArray[] = $date;
        }

        $dateAuPlusTot = date("d/m/Y", (min($tabArray)));
        return $dateAuPlusTot;
    }

    public function findByLecteurAndLivre(Lecteur $lecteur, Livre $livre)
    {
        $query = $this->getEntityManager()->createQuery("SELECT COUNT(e)
                                                         FROM BibliothequeUniversitaireEntiteBundle:Emprunt e
                                                         LEFT JOIN e.exemplaire_emprunte ee
                                                         WHERE ee.livres_dupliques = :livre_id
                                                         AND e.lecteur_emprunteur = :lecteur_id
                                                         ");
        $query->setParameter(':livre_id', $livre->getId());
        $query->setParameter(':lecteur_id', $lecteur->getId());

        $result = $query->getSingleScalarResult();

        if ($result > 0)
        {
            return true;
        } else {
            return false;
        }
    }

    public function checkDispoByLecteur($reservations, $lecteur, $nombreDispo)
    {
        $duree = $lecteur->getCycleChoisi()->getDuree();
        $dureeMax = strtotime("+" . $duree . " day", time("now"));
        $nbReservations = 0;

        foreach ($reservations as $reservation)
        {
            $dateStr = $reservation->getDateReservation()->format('d-m-Y');
            $date = strtotime($dateStr);

            if ($date <= $dureeMax)
            {
                $nbReservations++;
            }
        }

        if ($nombreDispo > $nbReservations)
        {
            return true;
        } else {
            return false;
        }

    }
}
