<?php

namespace BibliothequeUniversitaire\EntiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * LivreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LivreRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('titre' => 'ASC'));
    }

    /**
     * Fonction de recherches par titre, auteur et thème(s)
     * @param $data données du formulaire de recherche
     * @return array recherches trouvées
     */
    public function searchLivres($data)
    {
        $DQL = "SELECT l
                FROM BibliothequeUniversitaireEntiteBundle:Livre l
                LEFT JOIN l.auteurs_inscrits a
                LEFT JOIN l.themes_associes t
                WHERE l.titre LIKE :titre ";

        if ($data['auteur'] != null)
        {
            $DQL .= "AND TRIM(CONCAT(CONCAT(a.prenom, ' '), a.nom)) = :auteur ";
        }

        if ($data['theme'] != null)
        {
                foreach ($data['theme'] as $key => $value)
                {
                    $DQL .= "AND :theme" . $key . " MEMBER OF l.themes_associes ";
                }
        }
        $query = $this->getEntityManager()
                      ->createQuery($DQL);

        $query->setParameter('titre', '%' . $data['titre'] . '%');

        if ($data['auteur'] != null)
        {
            $query->setParameter('auteur', $data['auteur']);
        }

        if ($data['theme'] != null)
        {
            foreach ($data['theme'] as $key => $value)
            {
                $query->setParameter('theme'. $key, $value);
            }

        }
        return $query->getResult();
    }

    /*
     * @param $data collections de livres
     */
    public function removeOneAuteur($data)
    {
        $em = $this->getEntityManager();

        foreach ($data as $livre)
        {
                $em->remove($livre);
                $em->flush();
        }
    }

    /**
     * Détecte si un livre a été co-écrit
     * @param $data tableau de livres
     * @return boolean
     */
    public function isManyAuteurs($data)
    {
        $manyAuteurs = false;
        $em = $this->getEntityManager();

        foreach ($data as $livre)
        {
            if($livre->getAuteursInscrits()->count() > 1)
            {
                $manyAuteurs = true;
            }
        }

        return $manyAuteurs;
    }

    /**
     * Détecte si un Livre est toujours disponible
     * @param $livre Livre a vérifier
     * @return boolean
     */
    public function isDisponible(Livre $livre)
    {
        $query = $this->getEntityManager()->createQuery("SELECT COUNT(e) AS nombre
                                                         FROM BibliothequeUniversitaireEntiteBundle:Emprunt e
                                                         LEFT JOIN e.exemplaire_emprunte ee
                                                         WHERE ee.livres_dupliques = :livre_id");

        $query->setParameter(':livre_id', $livre->getId());

        $result = $query->getSingleScalarResult();

        if ($result < $livre->getNombreExemplaires())
        {
            return true;
        } else {
            return false;
        }

    }

    public function countLivreDispo(Livre $livre)
    {
        $query = $this->getEntityManager()->createQuery("SELECT COUNT(e) AS nombre
                                                         FROM BibliothequeUniversitaireEntiteBundle:Emprunt e
                                                         LEFT JOIN e.exemplaire_emprunte ee
                                                         WHERE ee.livres_dupliques = :livre_id");

        $query->setParameter(':livre_id', $livre->getId());

        $result = $query->getSingleScalarResult();

        return $livre->getNombreExemplaires() - $result;
    }

    public function findExemplairesDispo(Livre $livre)
    {
        $query = $this->getEntityManager()->createQuery("SELECT e
                                                         FROM BibliothequeUniversitaireEntiteBundle:Exemplaire e
                                                         WHERE e.livres_dupliques = :livre_id
                                                         AND e.id NOT IN (
                                                            SELECT IDENTITY(ee.exemplaire_emprunte)
                                                            FROM BibliothequeUniversitaireEntiteBundle:Emprunt ee
                                                         )");

        $query->setParameter(':livre_id', $livre->getId());

        $exemplaires = $query->getArrayResult();

        $tabExemplaires = array();

        foreach ($exemplaires as $exemplaire)
        {
            $key = $exemplaire['id'];
            $tabExemplaires[$key] = $exemplaire['cote'];
        }

        return $tabExemplaires;
    }
}
